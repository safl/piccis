#!/usr/bin/env python
#
# Piccis - Picture control, indexing and synchronization
# Copyright (C) 2012  Simon A. F. Lund <safl@safl.dk>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
import ConfigParser
import argparse
import pprint
import sys
import os

from piccislib.indexer import *

#
# Requirements: 
#
#   - Python 2.7 ( argparse ), dict-comprehensions.
#   - GData ( Picasa Web Albums )
#
# Performance Hints:
#
#   - Get an SSD
#   - On Linux: noatime or relatime;
#
# Find broken symlinks:
#
# find -L -type l
#
# Find and remove files:
#
# find . -name ".teamviewer" -exec rm -rf {} \;
#
# Remove broken symlinks:
#
# find -L -type l -exec rm {} \;
#

ERRNO_SUCCESS=0
ERRNO_COMPARE_GT=200
ERRNO_COMPARE_LT=210

def sourceCount(count):
    """Ensures that exactly "count" sources are provided to the command."""

    def wrap(f):
        def wrapped_f(*args):
            if len(*args) > count:
                return ERRNO_COMPARE_GT
            elif len(*args) < count:
                return ERRNO_COMPARE_LT
            else:
                return f(*args)
            
        return wrapped_f
    return wrap

def sourceMin(count):
    """Ensures that at least "count" sources are provided to the command."""

    def wrap(f):
        def wrapped_f(*args):
            if len(*args) < count:
                return ERRNO_COMPARE_LT
            else:
                return f(*args)
            
        return wrapped_f
    return wrap

@sourceMin(1)
def refresh( sources ):

    for source in sources:
        source.refresh()
        source.to_file()

@sourceMin(1)
def iprint( sources ):

    files = []
    for src in sources:
        files += [fns['path'] for album in src.index for fns in src.index[album] if not album == "__META__"]

    for fn in files:
        print fn

@sourceCount(2)
def compare( sources ):

    left    = sources[0]
    right   = sources[1]

    names   = {
        'synced': "%s, %s" % (left.name, right.name),

        'left':     left.name,
        'right':    right.name,

        'left_only':    left.name,
        'right_only':   right.name
    }
    files   = {
        'synced':[], 'left':[], 'right':[], 'left_only':[], 'right_only':[]
    }

    left_t  = dict((img['checksum'], img['path']) for album in left.index for img in left.index[album] if not album == "__META__")
    right_t = dict((img['checksum'], img['path']) for album in right.index for img in right.index[album] if not album == "__META__")

    files['left']   = left_t.copy()
    files['right']  = right_t.copy()

    for checksum in left_t:
        if checksum in right_t:
            files['synced'].append((left_t[checksum], right_t[checksum]))
            del right_t[checksum]
        else:
            files['left_only'].append((left_t[checksum], None))

    files['right_only'] = [(None, right_t[checksum]) for checksum in right_t]

    for fset in files:
        print "[%s - %s - %d]" % (fset, names[fset], len(files[fset]))
        if 'only' in fset:
            files[fset].sort()
            for l, r in files[fset]:
                if l:
                    print l,
                if r:
                    print r,
                print ""

    return ERRNO_SUCCESS

@sourceCount(1)
def duplicates( sources ):
    """Determine duplicates based on checksum."""

    dups = {} # Duplicates are stored here with checksum as key pointing to a list of paths.

    files = [(img['checksum'], img['path']) for src in sources for album in src.index if album != "__META__" for img in src.index[album]]
    files.sort()

    sums        = set([])
    checksum_p  = None
    path_p      = None

    for checksum, path in files:

        sums.add(checksum)
        if checksum == checksum_p:  # Duplicates
            if checksum in dups:
                dups[checksum].append(path)
            else:
                dups[checksum] = [path, path_p]

        checksum_p  = checksum
        path_p      = path
    
    dupf_count = 0
    for dup in dups:
        print dup[:len(dup)/2]
        print dup[len(dup)/2:]
        for path in dups[dup]:
            print "  %s" % path
            dupf_count += 1

    print "[Total=%d, Unique=%d, DupSums%d, DupFiles=%d, Dups=%d]" % (len(files), len(sums), len(dups), dupf_count, dupf_count - len(dups))

    return dups

def download( sources ):

    for src in sources:
        src.download()

@sourceCount(2)
def merge( sources ):

    print "Nu merger jeg!", sources

    return  ERRNO_SUCCESS

def main(command, sources=[]):

    commands    = {
        'refresh':      refresh,
        'print':        iprint,
        'compare':      compare,
        'duplicates':   duplicates,
        'download':     download,
        'merge':        merge
    }
    
    sys.exit(commands[args.command]( sources ))

if __name__ == "__main__":

    source_types = {
        'picasa':   Picasa,
        'local':    Local
    }
    sources = []                            # List of picture-sources

    parser = argparse.ArgumentParser()      # Parse command-line
    parser.add_argument(
        "-c",
        "--config",
        dest    = "config",
        help    = "Path to config-file.",
        type    = str
    )
    parser.add_argument(
        "command", 
        choices = ['refresh','print', 'compare', 'duplicates', 'download', 'merge'],
        help    = "Perform an index of provided sources."
    )
    parser.add_argument(
        "-s",
        "--source",
        dest    = "sources",
        action  = 'append', 
        help    = "Sources to use."
    )
    args = parser.parse_args()

    if args.config:                         # Parse 'sources' from config-file
        conf_path = args.config
    else:
        conf_path = os.path.expanduser('~/.piccis/sources.conf')

    if not os.path.exists(conf_path):
        os.makedirs(conf_path)

    conf = ConfigParser.RawConfigParser()
    conf.read(conf_path)

    for source in args.sources:             # Instantiate sources
        source_type = conf.get(source, 'type')
        source_args = dict([ opt for opt in conf.items(source) if not opt[0] == 'type' ])
        source_args['name'] = source
        sources.append( source_types[source_type]( **source_args ) )

    main( args.command, sources )
